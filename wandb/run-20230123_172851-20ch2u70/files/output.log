
ResNetMTL_Split
Dataset: Nyuv2 | Training Task: Semantic + Depth + Normals | Primary Task: Semantic + Depth + Normals in Multi-task / Auxiliary Learning Mode with RESNET
Applying Multi-task Methods: Weighting-based: Equal + Gradient-based: None
STEP. Loading datasets...
Data sanity check. RGB.shape: torch.Size([4, 3, 288, 384]),	Depth.shape torch.Size([4, 1, 288, 384]),    	Semantic.shape torch.Size([4, 288, 384]),	Normals.shape torch.Size([4, 3, 288, 384])
train_model.py:305: RuntimeWarning: invalid value encountered in true_divide
  depth = (depth - np.min(depth)) / (np.max(depth) - np.min(depth))
[tensor(2.5372, device='cuda:0'), tensor(3.0122, device='cuda:0'), tensor(0.4528, device='cuda:0')]
[tensor(2.5547, device='cuda:0'), tensor(1.7907, device='cuda:0'), tensor(0.4865, device='cuda:0')]
[tensor(2.5335, device='cuda:0'), tensor(2.3453, device='cuda:0'), tensor(0.4797, device='cuda:0')]
[tensor(2.5172, device='cuda:0'), tensor(2.6964, device='cuda:0'), tensor(0.4584, device='cuda:0')]
[tensor(2.5534, device='cuda:0'), tensor(3.3452, device='cuda:0'), tensor(0.4023, device='cuda:0')]
[tensor(2.5560, device='cuda:0'), tensor(2.8107, device='cuda:0'), tensor(0.4637, device='cuda:0')]
[tensor(2.5587, device='cuda:0'), tensor(3.3702, device='cuda:0'), tensor(0.4295, device='cuda:0')]
[tensor(2.5426, device='cuda:0'), tensor(3.1858, device='cuda:0'), tensor(0.4339, device='cuda:0')]
[tensor(2.5261, device='cuda:0'), tensor(2.5678, device='cuda:0'), tensor(0.4960, device='cuda:0')]
[tensor(2.5406, device='cuda:0'), tensor(4.2219, device='cuda:0'), tensor(0.4497, device='cuda:0')]
[tensor(2.5155, device='cuda:0'), tensor(2.9044, device='cuda:0'), tensor(0.4478, device='cuda:0')]
[tensor(2.5519, device='cuda:0'), tensor(3.5997, device='cuda:0'), tensor(0.4826, device='cuda:0')]
[tensor(2.5347, device='cuda:0'), tensor(3.0222, device='cuda:0'), tensor(0.4495, device='cuda:0')]
[tensor(2.5238, device='cuda:0'), tensor(2.5819, device='cuda:0'), tensor(0.4667, device='cuda:0')]
[tensor(2.5267, device='cuda:0'), tensor(1.6503, device='cuda:0'), tensor(0.4120, device='cuda:0')]
[tensor(2.5352, device='cuda:0'), tensor(2.7824, device='cuda:0'), tensor(0.4424, device='cuda:0')]
[tensor(2.5386, device='cuda:0'), tensor(4.7458, device='cuda:0'), tensor(0.4793, device='cuda:0')]
[tensor(2.5418, device='cuda:0'), tensor(4.6707, device='cuda:0'), tensor(0.4748, device='cuda:0')]
[tensor(2.5368, device='cuda:0'), tensor(2.9261, device='cuda:0'), tensor(0.4986, device='cuda:0')]
[tensor(2.5362, device='cuda:0'), tensor(1.9104, device='cuda:0'), tensor(0.4988, device='cuda:0')]
[tensor(2.5057, device='cuda:0'), tensor(3.1377, device='cuda:0'), tensor(0.4642, device='cuda:0')]
[tensor(2.5056, device='cuda:0'), tensor(2.7881, device='cuda:0'), tensor(0.4444, device='cuda:0')]
[tensor(2.5219, device='cuda:0'), tensor(2.6726, device='cuda:0'), tensor(0.4387, device='cuda:0')]
[tensor(2.5240, device='cuda:0'), tensor(1.9765, device='cuda:0'), tensor(0.4291, device='cuda:0')]
[tensor(2.5422, device='cuda:0'), tensor(2.5066, device='cuda:0'), tensor(0.4861, device='cuda:0')]
[tensor(2.5283, device='cuda:0'), tensor(1.1461, device='cuda:0'), tensor(0.5151, device='cuda:0')]
Traceback (most recent call last):
  File "train_model.py", line 407, in <module>
    test_pred = model(image)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/dim/mdpi_robotics/mtl-world/models/model_ResNet.py", line 286, in forward
    out[i] = F.interpolate(self.decoders[i](x), size=[im_h, im_w], mode='bilinear', align_corners=True)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/dim/mdpi_robotics/mtl-world/models/model_ResNet.py", line 74, in forward
    res.append(conv(x))
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/container.py", line 141, in forward
    input = module(input)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/module.py", line 1102, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/conv.py", line 448, in forward
    return self._conv_forward(input, self.weight, self.bias)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/modules/conv.py", line 445, in _conv_forward
    self.padding, self.dilation, self.groups)
KeyboardInterrupt
[tensor(2.5315, device='cuda:0'), tensor(1.7902, device='cuda:0'), tensor(0.4869, device='cuda:0')]
[tensor(2.5404, device='cuda:0'), tensor(2.2770, device='cuda:0'), tensor(0.5013, device='cuda:0')]
[tensor(2.5138, device='cuda:0'), tensor(1.8474, device='cuda:0'), tensor(0.4422, device='cuda:0')]
[tensor(2.5234, device='cuda:0'), tensor(2.1959, device='cuda:0'), tensor(0.4853, device='cuda:0')]
[tensor(2.5433, device='cuda:0'), tensor(2.0904, device='cuda:0'), tensor(0.5192, device='cuda:0')]
[tensor(2.5221, device='cuda:0'), tensor(1.9864, device='cuda:0'), tensor(0.4899, device='cuda:0')]
[tensor(2.5514, device='cuda:0'), tensor(1.7598, device='cuda:0'), tensor(0.5164, device='cuda:0')]
[tensor(2.5324, device='cuda:0'), tensor(2.1051, device='cuda:0'), tensor(0.4514, device='cuda:0')]
[tensor(2.5331, device='cuda:0'), tensor(2.7739, device='cuda:0'), tensor(0.4945, device='cuda:0')]
[tensor(2.5228, device='cuda:0'), tensor(2.8704, device='cuda:0'), tensor(0.4693, device='cuda:0')]
[tensor(2.5275, device='cuda:0'), tensor(1.9030, device='cuda:0'), tensor(0.5046, device='cuda:0')]
[tensor(2.5486, device='cuda:0'), tensor(2.1919, device='cuda:0'), tensor(0.5143, device='cuda:0')]
[tensor(2.5650, device='cuda:0'), tensor(4.7360, device='cuda:0'), tensor(0.4719, device='cuda:0')]
[tensor(2.5708, device='cuda:0'), tensor(3.0827, device='cuda:0'), tensor(0.4765, device='cuda:0')]
[tensor(2.5728, device='cuda:0'), tensor(2.7889, device='cuda:0'), tensor(0.4684, device='cuda:0')]
[tensor(2.5758, device='cuda:0'), tensor(2.9439, device='cuda:0'), tensor(0.4512, device='cuda:0')]
[tensor(2.5282, device='cuda:0'), tensor(2.5098, device='cuda:0'), tensor(0.4627, device='cuda:0')]
[tensor(2.5669, device='cuda:0'), tensor(3.5764, device='cuda:0'), tensor(0.4726, device='cuda:0')]
[tensor(2.5542, device='cuda:0'), tensor(3.2475, device='cuda:0'), tensor(0.4733, device='cuda:0')]
[tensor(2.5446, device='cuda:0'), tensor(3.7320, device='cuda:0'), tensor(0.4812, device='cuda:0')]
[tensor(2.5636, device='cuda:0'), tensor(3.5500, device='cuda:0'), tensor(0.4597, device='cuda:0')]