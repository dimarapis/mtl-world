
DDRNetMTL_Split
Dataset: Nyuv2 | Training Task: Semantic + Depth + Normals | Primary Task: Semantic + Depth + Normals in Multi-task / Auxiliary Learning Mode with DDRNET
Applying Multi-task Methods: Weighting-based: Equal + Gradient-based: NONE
STEP. Loading datasets...
Data sanity check. RGB.shape: torch.Size([32, 3, 288, 384]),	Depth.shape torch.Size([32, 1, 288, 384]),    	Semantic.shape torch.Size([32, 288, 384]),	Normals.shape torch.Size([32, 3, 288, 384])
  0%|                                                                                                                                                         | 0/25 [00:00<?, ?it/s]/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/functional.py:3635: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode)




100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:07<00:00,  3.46it/s]
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
6
torch.Size([1, 13, 288, 384])
torch.Size([13, 288, 384])
torch.Size([288, 384])
5
Traceback (most recent call last):
  File "train_model.py", line 414, in <module>
    gt_normals = rgb_visualizer(multitaskdatatest['normals'].to(device).squeeze(1).squeeze(0).cpu().numpy())
  File "train_model.py", line 297, in rgb_visualizer
    image = (image - np.min(image)) / (np.max(image) - np.min(image))
  File "<__array_function__ internals>", line 6, in amin
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 2859, in amin
    keepdims=keepdims, initial=initial, where=where)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 87, in _wrapreduction
    return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
KeyboardInterrupt