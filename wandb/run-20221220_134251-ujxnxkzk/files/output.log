DDRNetMTL_Split
Dataset: Nyuv2 | Training Task: Semantic + Depth + Normals | Primary Task: Semantic + Depth + Normals in Multi-task / Auxiliary Learning Mode with DDRNET
Applying Multi-task Methods: Weighting-based: Equal + Gradient-based: NONE
STEP. Loading datasets...
Data sanity check. RGB.shape: torch.Size([32, 3, 288, 384]),	Depth.shape torch.Size([32, 1, 288, 384]),    	Semantic.shape torch.Size([32, 288, 384]),	Normals.shape torch.Size([32, 3, 288, 384])
  0%|                                                                                                                                                         | 0/25 [00:00<?, ?it/s]/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/torch/nn/functional.py:3635: UserWarning: Default upsampling behavior when mode=bilinear is changed to align_corners=False since 0.4.0. Please specify align_corners=True if the old behavior is desired. See the documentation of nn.Upsample for details.
  "See the documentation of nn.Upsample for details.".format(mode)


100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:07<00:00,  3.33it/s]
train_model.py:290: RuntimeWarning: invalid value encountered in true_divide
  depth = (depth - np.min(depth)) / (np.max(depth) - np.min(depth))
Traceback (most recent call last):
  File "train_model.py", line 406, in <module>
    prediction_normals = rgb_visualizer(test_pred[2].cpu().numpy())
  File "train_model.py", line 301, in rgb_visualizer
    rgb = np.transpose(image, (1, 2, 0))
  File "<__array_function__ internals>", line 6, in transpose
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 658, in transpose
    return _wrapfunc(a, 'transpose', axes)
  File "/home/dim/anaconda3/envs/pytorchenv/lib/python3.7/site-packages/numpy/core/fromnumeric.py", line 58, in _wrapfunc
    return bound(*args, **kwds)
ValueError: axes don't match array
tensor([[[[-0.1105,  0.1983,  0.5071,  ...,  1.7109,  1.6875,  1.6641],
          [ 0.0105,  0.2773,  0.5442,  ...,  1.7057,  1.6977,  1.6897],
          [ 0.1315,  0.3564,  0.5812,  ...,  1.7005,  1.7079,  1.7154],
          ...,
          [-0.1855, -0.0749,  0.0356,  ...,  0.3468,  0.3069,  0.2670],
          [-0.1691, -0.0606,  0.0480,  ...,  0.4313,  0.3706,  0.3098],
          [-0.1527, -0.0462,  0.0603,  ...,  0.5158,  0.4342,  0.3526]],
         [[-1.1359, -0.9744, -0.8129,  ..., -2.5318, -2.4129, -2.2941],
          [-1.2493, -1.0954, -0.9416,  ..., -2.5207, -2.3982, -2.2756],
          [-1.3627, -1.2164, -1.0702,  ..., -2.5097, -2.3834, -2.2571],
          ...,
          [-2.1683, -2.0978, -2.0273,  ..., -0.8113, -0.6497, -0.4880],
          [-2.1587, -2.0779, -1.9971,  ..., -0.8383, -0.6332, -0.4282],
          [-2.1491, -2.0580, -1.9668,  ..., -0.8652, -0.6168, -0.3684]],
         [[-0.9144, -0.8865, -0.8586,  ..., -1.0424, -1.2331, -1.4239],
          [-0.8021, -0.7734, -0.7448,  ..., -0.9797, -1.1501, -1.3205],
          [-0.6897, -0.6603, -0.6310,  ..., -0.9170, -1.0671, -1.2171],
          ...,
          [ 0.4719,  0.4554,  0.4389,  ..., -1.3922, -1.3992, -1.4063],
          [ 0.7084,  0.6989,  0.6894,  ..., -1.5161, -1.4837, -1.4512],
          [ 0.9449,  0.9424,  0.9399,  ..., -1.6400, -1.5681, -1.4961]]]],
       device='cuda:0')
torch.Size([1, 3, 288, 384])